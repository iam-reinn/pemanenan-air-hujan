#define BLYNK_TEMPLATE_ID "TMPL6oL5mWFa3"
#define BLYNK_TEMPLATE_NAME "TUJUH"
#define BLYNK_AUTH_TOKEN "XkqS9PBUuhkqKP-rCW0Z0fLcRRvyDozc"

#include <WiFi.h>
#include <BlynkSimpleEsp32.h>
#include <NewPing.h>

// WiFi credentials
char ssid[] = "POCO X3 Pro";
char pass[] = "";

// Pin konfigurasi
#define PIN_RAIN_SENSOR 32
#define PIN_TRIG 23
#define PIN_ECHO 22
#define PIN_TDS 35
#define LED_MERAH 25
#define LED_KUNING 26
#define LED_HIJAU 27
#define RELAY_A 18
#define RELAY_B 5
#define RELAY_C 17

#define MAX_DISTANCE 30
NewPing sonar(PIN_TRIG, PIN_ECHO, MAX_DISTANCE);

// Virtual pin
#define VPIN_VOLUME V0
#define VPIN_TDS V1
#define VPIN_RELAY_A V2
#define VPIN_RELAY_B V3
#define VPIN_KRAN V4
#define VPIN_OTOMATIS V5

// Variabel sistem
int volume = 0;
int tdsValue = 0;
int rainValue = 0;
int threshold = 2000;
bool wifiConnected = false;
bool modeOtomatis = true;

unsigned long lastReconnectAttempt = 0;

// Fungsi Blynk kontrol
BLYNK_WRITE(VPIN_KRAN) {
  int state = param.asInt();
  digitalWrite(RELAY_C, state);
  Serial.print("Kran manual dari Blynk: ");
  Serial.println(state == HIGH ? "HIDUP" : "MATI");
}

BLYNK_WRITE(VPIN_RELAY_A) {
  if (!modeOtomatis) {
    int state = param.asInt();
    digitalWrite(RELAY_A, state);
    Serial.print("Manual Blynk - Relay A: ");
    Serial.println(state == HIGH ? "ON" : "OFF");
  }
}

BLYNK_WRITE(VPIN_RELAY_B) {
  if (!modeOtomatis) {
    int state = param.asInt();
    digitalWrite(RELAY_B, state);
    Serial.print("Manual Blynk - Relay B: ");
    Serial.println(state == HIGH ? "ON" : "OFF");
  }
}

BLYNK_WRITE(VPIN_OTOMATIS) {
  modeOtomatis = param.asInt();
  Serial.print("Mode Otomatis: ");
  Serial.println(modeOtomatis ? "AKTIF" : "NONAKTIF");

  if (!modeOtomatis) {
    Serial.println("Manual mode aktif, menunggu kontrol manual dari Blynk.");
  }
}

void koneksiWiFi() {
  if (WiFi.status() != WL_CONNECTED) {
    Serial.println("WiFi tidak terhubung, mencoba reconnect...");
    WiFi.disconnect();
    WiFi.begin(ssid, pass);

    unsigned long waktuAwal = millis();
    while (WiFi.status() != WL_CONNECTED && millis() - waktuAwal < 15000) {
      Serial.print(".");
      delay(500);
    }

    if (WiFi.status() == WL_CONNECTED) {
      Serial.println("\nWiFi berhasil terhubung!");
      Serial.print("IP: ");
      Serial.println(WiFi.localIP());
      wifiConnected = true;
    } else {
      Serial.println("\nGagal konek WiFi.");
      wifiConnected = false;
    }
  } else {
    wifiConnected = true;
  }
}

void setup() {
  Serial.begin(9600);
  delay(1000);

  Serial.println("Menghubungkan ke WiFi...");
  WiFi.begin(ssid, pass);
  while (WiFi.status() != WL_CONNECTED) {
    Serial.print(".");
    delay(500);
  }

  Serial.println("\nWiFi Terhubung!");
  Serial.print("IP Address: ");
  Serial.println(WiFi.localIP());

  Blynk.begin(BLYNK_AUTH_TOKEN, ssid, pass);

  pinMode(PIN_RAIN_SENSOR, INPUT);
  pinMode(PIN_TDS, INPUT);

  pinMode(LED_MERAH, OUTPUT);
  pinMode(LED_KUNING, OUTPUT);
  pinMode(LED_HIJAU, OUTPUT);

  pinMode(RELAY_A, OUTPUT);
  pinMode(RELAY_B, OUTPUT);
  pinMode(RELAY_C, OUTPUT);

  digitalWrite(RELAY_A, LOW);
  digitalWrite(RELAY_B, LOW);
  digitalWrite(RELAY_C, LOW);

  Serial.println("Sistem mulai...");
}

void loop() {
  koneksiWiFi();

  if (wifiConnected && Blynk.connected()) {
    Blynk.run();
    cekHujan();
    ukurVolume();
    ukurTDS();

    if (modeOtomatis) {
      kendaliSolenoid();
    }

    updateLED();
    sinkronRelay();
  } else {
    Serial.println("Menunggu koneksi WiFi & Blynk...");
  }

  delay(1000);
}

void cekHujan() {
  rainValue = analogRead(PIN_RAIN_SENSOR);
  Serial.print("Nilai sensor hujan: ");
  Serial.println(rainValue);

  if (rainValue < threshold) {
    Serial.println("Status: HUJAN");
  } else {
    Serial.println("Status: TIDAK HUJAN");
  }
}

void ukurVolume() {
  int jarak = sonar.ping_cm();
  jarak = constrain(jarak, 0, 30);
  volume = 100 - map(jarak, 0, 30, 0, 100);
  Blynk.virtualWrite(VPIN_VOLUME, volume);
  Serial.print("Jarak air: ");
  Serial.print(jarak);
  Serial.print(" cm | Volume: ");
  Serial.print(volume);
  Serial.println(" %");
}

void ukurTDS() {
  tdsValue = analogRead(PIN_TDS);
  Blynk.virtualWrite(VPIN_TDS, tdsValue);
  Serial.print("Nilai TDS: ");
  Serial.println(tdsValue);
}

void kendaliSolenoid() {
  if (rainValue < threshold) {
    if (volume < 95) {
      digitalWrite(RELAY_A, HIGH);
      digitalWrite(RELAY_B, LOW);
      Serial.println("Kran otomatis: MENGISI (RELAY_A ON)");
    } else {
      digitalWrite(RELAY_A, LOW);
      digitalWrite(RELAY_B, HIGH);
      Serial.println("Kran otomatis: PENUH (RELAY_B ON)");
    }
  } else {
    digitalWrite(RELAY_A, LOW);
    digitalWrite(RELAY_B, LOW);
    Serial.println("Kran otomatis: MATI (tidak hujan)");
  }
}

void updateLED() {
  if (volume < 20) {
    digitalWrite(LED_MERAH, HIGH);
    digitalWrite(LED_KUNING, LOW);
    digitalWrite(LED_HIJAU, LOW);
    Serial.println("LED Indikator: MERAH (Air sedikit)");
  } else if (volume < 80) {
    digitalWrite(LED_MERAH, LOW);
    digitalWrite(LED_KUNING, HIGH);
    digitalWrite(LED_HIJAU, LOW);
    Serial.println("LED Indikator: KUNING (Air sedang)");
  } else {
    digitalWrite(LED_MERAH, LOW);
    digitalWrite(LED_KUNING, LOW);
    digitalWrite(LED_HIJAU, HIGH);
    Serial.println("LED Indikator: HIJAU (Air penuh)");
  }
}

void sinkronRelay() {
  Blynk.virtualWrite(VPIN_RELAY_A, digitalRead(RELAY_A));
  Blynk.virtualWrite(VPIN_RELAY_B, digitalRead(RELAY_B));
  Blynk.virtualWrite(VPIN_OTOMATIS, modeOtomatis);
}
